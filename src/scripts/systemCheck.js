const http = require('http');

const systemCheck = async () => {
    console.log('üîç KI·ªÇM TRA T√åNH TR·∫†NG H·ªÜ TH·ªêNG');
    console.log('=' .repeat(50));
    
    let allGood = true;
    
    // 1. Ki·ªÉm tra server c√≥ ch·∫°y kh√¥ng
    try {
        await checkUrl('http://localhost:3000', 'Node.js Server');
        console.log('‚úÖ Server ƒëang ch·∫°y');
    } catch (error) {
        console.log('‚ùå Server kh√¥ng ch·∫°y');
        allGood = false;
    }
    
    // 2. Ki·ªÉm tra API Posts
    try {
        const postsData = await checkUrl('http://localhost:3000/api/posts/public?limit=1', 'Posts API');
        const response = JSON.parse(postsData);
        if (response.success && response.data.posts.length > 0) {
            console.log(`‚úÖ Posts API ho·∫°t ƒë·ªông (${response.data.pagination.totalItems} b√†i vi·∫øt)`);
        } else {
            console.log('‚ö†Ô∏è  Posts API ho·∫°t ƒë·ªông nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu');
        }
    } catch (error) {
        console.log('‚ùå Posts API kh√¥ng ho·∫°t ƒë·ªông');
        allGood = false;
    }
    
    // 3. Ki·ªÉm tra API Categories
    try {
        const categoriesData = await checkUrl('http://localhost:3000/api/categories/public', 'Categories API');
        const response = JSON.parse(categoriesData);
        if (response.success && response.data.length > 0) {
            console.log(`‚úÖ Categories API ho·∫°t ƒë·ªông (${response.data.length} danh m·ª•c)`);
        } else {
            console.log('‚ö†Ô∏è  Categories API ho·∫°t ƒë·ªông nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu');
        }
    } catch (error) {
        console.log('‚ùå Categories API kh√¥ng ho·∫°t ƒë·ªông');
        allGood = false;
    }
    
    // 4. Ki·ªÉm tra Website frontend
    try {
        const websiteData = await checkUrl('http://localhost:3000', 'Website Frontend');
        if (websiteData.includes('<!DOCTYPE html>')) {
            console.log('‚úÖ Website frontend t·∫£i ƒë∆∞·ª£c');
        } else {
            console.log('‚ö†Ô∏è  Website frontend c√≥ v·∫•n ƒë·ªÅ');
        }
    } catch (error) {
        console.log('‚ùå Website frontend kh√¥ng t·∫£i ƒë∆∞·ª£c');
        allGood = false;
    }
    
    // 5. Ki·ªÉm tra MongoDB (gi√°n ti·∫øp qua database connection)
    try {
        require('dotenv').config();
        const mongoose = require('mongoose');
        await mongoose.connect('mongodb://localhost:27017/ltvlaw');
        
        const Post = require('../models/Post');
        const postCount = await Post.countDocuments();
        
        const Category = require('../models/Category');
        const categoryCount = await Category.countDocuments();
        
        console.log(`‚úÖ MongoDB k·∫øt n·ªëi ƒë∆∞·ª£c (${postCount} b√†i vi·∫øt, ${categoryCount} danh m·ª•c)`);
        
        mongoose.connection.close();
    } catch (error) {
        console.log('‚ùå MongoDB kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c');
        allGood = false;
    }
    
    console.log('=' .repeat(50));
    
    if (allGood) {
        console.log('üéâ T·∫§T C·∫¢ D·ªäCH V·ª§ HO·∫†T ƒê·ªòNG B√åNH TH∆Ø·ªúNG!');
        console.log('üåê Website c√≥ th·ªÉ truy c·∫≠p t·∫°i: http://localhost:3000');
        console.log('üîß Admin panel t·∫°i: http://localhost:3000/admin');
    } else {
        console.log('‚ö†Ô∏è  C√ì V·∫§N ƒê·ªÄ V·ªöI H·ªÜ TH·ªêNG!');
        console.log('üí° H√£y ki·ªÉm tra c√°c d·ªãch v·ª• b·ªã l·ªói ·ªü tr√™n');
    }
    
    console.log('\nüìã C√ÅC L·ªÜNH H·ªÆU √çCH:');
    console.log('   npm run dev          - Kh·ªüi ƒë·ªông server');
    console.log('   npm run seed-posts   - T·∫°o d·ªØ li·ªáu m·∫´u');
    console.log('   npm run check-posts  - Ki·ªÉm tra b√†i vi·∫øt');
    console.log('   npm run check-system - Ki·ªÉm tra h·ªá th·ªëng');
};

// Helper function to check URL
function checkUrl(url, name) {
    return new Promise((resolve, reject) => {
        const timeout = 5000; // 5 seconds timeout
        
        const req = http.get(url, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                if (res.statusCode >= 200 && res.statusCode < 300) {
                    resolve(data);
                } else {
                    reject(new Error(`HTTP ${res.statusCode}`));
                }
            });
        });
        
        req.on('error', reject);
        req.setTimeout(timeout, () => {
            req.abort();
            reject(new Error('Timeout'));
        });
    });
}

systemCheck(); 